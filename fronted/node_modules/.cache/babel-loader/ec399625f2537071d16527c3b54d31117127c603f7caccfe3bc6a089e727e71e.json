{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noket\\\\SocialTelegram\\\\fronted\\\\src\\\\Components\\\\Chats\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport SockJS from 'sockjs-client';\nimport { Client, Stomp } from '@stomp/stompjs';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat(props) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [chatId, setChatId] = useState(null);\n  const [inputText, setInputText] = useState('');\n  const [hasMore, setHasMore] = useState(true);\n  const clientRef = useRef(null);\n  const topRef = useRef(null);\n  const containerRef = useRef(null);\n  const isFirstLoad = useRef(true);\n  async function getChatId() {\n    try {\n      const response = await fetch(`http://localhost:8000/api/chats/twoId?id1=${props.userId}&id2=${props.user2Id}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      if (response.ok) {\n        const id = await response.text();\n        await setChatId(id);\n      } else {}\n    } catch (error) {\n      console.error('Ошибка:', error);\n    }\n  }\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:800/ws\");\n    const client = Stomp.over(socket);\n    getChatId();\n    client.connect({}, () => {\n      client.subscribe(`/topic/${chatId}`, message => {\n        const msg = JSON.parse(message.body);\n        setMessages(prev => [...prev, msg]);\n      });\n    });\n    client.activate();\n    clientRef.current = client;\n    return () => {\n      client.disconnect();\n    };\n  }, [chatId]);\n  useEffect(() => {});\n  function sendMessage() {}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userInfo_chat\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userName_chat\",\n        children: props.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: msg.senderId === props.currentUserId ? 'my-message' : 'their-message',\n      children: msg.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"push_chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n        className: \"input_chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chat_button\",\n        onClick: sendMessage,\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"Hv5BRWDPBqQQKSJVF4rCgdDHNfE=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useRef","SockJS","Client","Stomp","jsxDEV","_jsxDEV","Chat","props","_s","messages","setMessages","chatId","setChatId","inputText","setInputText","hasMore","setHasMore","clientRef","topRef","containerRef","isFirstLoad","getChatId","response","fetch","userId","user2Id","method","headers","localStorage","getItem","ok","id","text","error","console","socket","client","over","connect","subscribe","message","msg","JSON","parse","body","prev","activate","current","disconnect","sendMessage","children","className","username","fileName","_jsxFileName","lineNumber","columnNumber","map","index","senderId","currentUserId","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/noket/SocialTelegram/fronted/src/Components/Chats/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport SockJS from 'sockjs-client';\r\nimport { Client, Stomp } from '@stomp/stompjs';\r\nimport'./Chat.css'\r\n\r\nfunction Chat(props){\r\n\r\n    const [messages, setMessages] = useState([]);\r\n    const [chatId, setChatId] = useState(null)\r\n    const [inputText, setInputText] = useState('');\r\n    const [hasMore, setHasMore] = useState(true);\r\n\r\n    const clientRef = useRef(null);\r\n    const topRef = useRef(null);\r\n    const containerRef = useRef(null);\r\n    const isFirstLoad = useRef(true);\r\n\r\n    async function getChatId(){\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/api/chats/twoId?id1=${props.userId}&id2=${props.user2Id}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n          }\r\n        });\r\n\r\n        if(response.ok){\r\n            const id = await response.text()\r\n            await setChatId(id)\r\n        }\r\n        else{\r\n        }\r\n      } \r\n      catch (error) {\r\n        console.error('Ошибка:', error);\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      const socket = new SockJS(\"http://localhost:800/ws\") \r\n      const client = Stomp.over(socket)\r\n\r\n      getChatId()\r\n\r\n      client.connect({}, () => {\r\n        client.subscribe(`/topic/${chatId}`, (message) => {\r\n          const msg = JSON.parse(message.body);\r\n          setMessages((prev) => [...prev, msg]);\r\n        })\r\n      })\r\n\r\n      client.activate()\r\n      clientRef.current = client\r\n\r\n      return () => {\r\n        client.disconnect()\r\n      }\r\n    }, [chatId])\r\n    \r\n    useEffect(() => {\r\n      \r\n    })\r\n\r\n    function sendMessage(){\r\n\r\n    }\r\n    return(\r\n        <div> \r\n            <div className=\"userInfo_chat\">\r\n              <div className=\"userName_chat\">{props.username}</div>\r\n            </div>\r\n            {messages.map((msg, index) => (\r\n              <div key={index} className={msg.senderId === props.currentUserId ? 'my-message' : 'their-message'}>\r\n                {msg.text}\r\n              </div>\r\n            ))}\r\n            <div className=\"push_chat\">\r\n              <input value={inputText} onChange={(e) => setInputText(e.target.value)} placeholder=\"Введите сообщение\" className=\"input_chat\"/>\r\n              <button className=\"chat_button\" onClick={sendMessage}>send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}