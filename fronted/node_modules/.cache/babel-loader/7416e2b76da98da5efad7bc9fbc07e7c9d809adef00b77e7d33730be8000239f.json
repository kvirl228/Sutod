{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noket\\\\Desktop\\\\Sutod\\\\fronted\\\\src\\\\Components\\\\Chats\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  userId,\n  user2Id,\n  username\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const stompClientRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  // Инициализация WebSocket соединения\n  const connect = useCallback(() => {\n    const socket = new SockJS('http://localhost:8080/ws');\n    const client = over(socket);\n    client.connect({\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }, () => {\n      setIsConnected(true);\n      console.log(\"WebSocket connected\");\n\n      // Подписка на получение сообщений\n      client.subscribe(`/user/${userId}/queue/messages`, message => {\n        const newMessage = JSON.parse(message.body);\n        setMessages(prev => [...prev, newMessage]);\n      });\n\n      // Подписка на ошибки\n      client.subscribe(`/user/${userId}/queue/errors`, error => {\n        console.error(\"WebSocket error:\", error.body);\n      });\n    }, error => {\n      console.error(\"WebSocket connection error:\", error);\n      setIsConnected(false);\n      // Переподключение через 5 секунд\n      setTimeout(connect, 5000);\n    });\n    stompClientRef.current = client;\n    return client;\n  }, [userId]);\n\n  // Отправка сообщения\n  const sendMessage = useCallback(() => {\n    if (!inputText.trim() || !stompClientRef.current || !isConnected) return;\n    stompClientRef.current.send(`/app/chat.send.${user2Id}`, {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }, JSON.stringify({\n      content: inputText\n    }));\n    setInputText('');\n  }, [inputText, isConnected, user2Id]);\n\n  // Загрузка истории сообщений\n  const loadMessages = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`http://localhost:8080/api/messages/with/${user2Id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      if (response.ok) {\n        const messages = await response.json();\n        setMessages(messages);\n      } else {\n        console.error(\"Failed to load messages:\", response.status);\n      }\n    } catch (error) {\n      console.error(\"Error loading messages:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user2Id]);\n\n  // Автоскролл при новых сообщениях\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Инициализация при монтировании\n  useEffect(() => {\n    loadMessages();\n    const client = connect();\n    return () => {\n      if (client && client.connected) {\n        client.disconnect();\n      }\n    };\n  }, [connect, loadMessages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chat with \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `connection-status ${isConnected ? 'connected' : 'disconnected'}`,\n        children: isConnected ? 'Online' : 'Offline'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this) : messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.senderId === userId ? 'sent' : 'received'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-time\",\n          children: new Date(message.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && sendMessage(),\n        placeholder: \"Type a message...\",\n        disabled: !isConnected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: !inputText.trim() || !isConnected,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"omQNVkuVPFWmbqQyL3bitblTzlg=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","SockJS","over","jsxDEV","_jsxDEV","Chat","userId","user2Id","username","_s","messages","setMessages","inputText","setInputText","isConnected","setIsConnected","isLoading","setIsLoading","stompClientRef","messagesEndRef","connect","socket","client","Authorization","localStorage","getItem","console","log","subscribe","message","newMessage","JSON","parse","body","prev","error","setTimeout","current","sendMessage","trim","send","stringify","content","loadMessages","response","fetch","headers","ok","json","status","_messagesEndRef$curre","scrollIntoView","behavior","connected","disconnect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","senderId","Date","timestamp","toLocaleTimeString","id","ref","type","value","onChange","e","target","onKeyPress","key","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/noket/Desktop/Sutod/fronted/src/Components/Chats/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport SockJS from 'sockjs-client';\r\nimport { over } from 'stompjs';\r\nimport './Chat.css';\r\n\r\nfunction Chat({ userId, user2Id, username }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const stompClientRef = useRef(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Инициализация WebSocket соединения\r\n  const connect = useCallback(() => {\r\n    const socket = new SockJS('http://localhost:8080/ws');\r\n    const client = over(socket);\r\n    \r\n    client.connect(\r\n      { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n      () => {\r\n        setIsConnected(true);\r\n        console.log(\"WebSocket connected\");\r\n        \r\n        // Подписка на получение сообщений\r\n        client.subscribe(`/user/${userId}/queue/messages`, (message) => {\r\n          const newMessage = JSON.parse(message.body);\r\n          setMessages(prev => [...prev, newMessage]);\r\n        });\r\n        \r\n        // Подписка на ошибки\r\n        client.subscribe(`/user/${userId}/queue/errors`, (error) => {\r\n          console.error(\"WebSocket error:\", error.body);\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error(\"WebSocket connection error:\", error);\r\n        setIsConnected(false);\r\n        // Переподключение через 5 секунд\r\n        setTimeout(connect, 5000);\r\n      }\r\n    );\r\n    \r\n    stompClientRef.current = client;\r\n    return client;\r\n  }, [userId]);\r\n\r\n  // Отправка сообщения\r\n  const sendMessage = useCallback(() => {\r\n    if (!inputText.trim() || !stompClientRef.current || !isConnected) return;\r\n\r\n    stompClientRef.current.send(\r\n      `/app/chat.send.${user2Id}`,\r\n      { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n      JSON.stringify({ content: inputText })\r\n    );\r\n    \r\n    setInputText('');\r\n  }, [inputText, isConnected, user2Id]);\r\n\r\n  // Загрузка истории сообщений\r\n  const loadMessages = useCallback(async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/api/messages/with/${user2Id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const messages = await response.json();\r\n        setMessages(messages);\r\n      } else {\r\n        console.error(\"Failed to load messages:\", response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading messages:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [user2Id]);\r\n\r\n  // Автоскролл при новых сообщениях\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // Инициализация при монтировании\r\n  useEffect(() => {\r\n    loadMessages();\r\n    const client = connect();\r\n\r\n    return () => {\r\n      if (client && client.connected) {\r\n        client.disconnect();\r\n      }\r\n    };\r\n  }, [connect, loadMessages]);\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <h3>Chat with {username}</h3>\r\n        <div className={`connection-status ${isConnected ? 'connected' : 'disconnected'}`}>\r\n          {isConnected ? 'Online' : 'Offline'}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages-container\">\r\n        {isLoading ? (\r\n          <div className=\"loading\">Loading messages...</div>\r\n        ) : (\r\n          messages.map((message) => (\r\n            <div\r\n              key={message.id}\r\n              className={`message ${message.senderId === userId ? 'sent' : 'received'}`}\r\n            >\r\n              <div className=\"message-content\">{message.content}</div>\r\n              <div className=\"message-time\">\r\n                {new Date(message.timestamp).toLocaleTimeString()}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"message-input\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\r\n          placeholder=\"Type a message...\"\r\n          disabled={!isConnected}\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          disabled={!inputText.trim() || !isConnected}\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}