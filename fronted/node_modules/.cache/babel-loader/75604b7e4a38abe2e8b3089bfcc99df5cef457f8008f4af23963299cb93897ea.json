{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noket\\\\Desktop\\\\Sutod\\\\fronted\\\\src\\\\Components\\\\Chats\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport SockJS from 'sockjs-client';\nimport { Client, Stomp } from '@stomp/stompjs';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  userId,\n  user2Id,\n  username\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [chatId, setChatId] = useState(0);\n  const [stompClient, setStompClient] = useState(null);\n  const containerRef = useRef(null);\n  const pageRef = useRef(0);\n\n  // Получение или создание чата\n  const fetchChatId = useCallback(async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/chats/twoId?id1=${userId}&id2=${user2Id}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      if (response.ok) {\n        const id = await response.text();\n        setChatId(id);\n        return id;\n      } else {\n        const createResponse = await fetch('http://localhost:8080/api/chats', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId,\n            user2Id\n          })\n        });\n        if (createResponse.ok) {\n          return await createResponse.text();\n        } else {\n          alert(\"mdaaa\");\n        }\n      }\n    } catch (error) {\n      console.error('Chat error:', error);\n      return null;\n    }\n  }, [userId, user2Id]);\n\n  // Загрузка сообщений\n  // const loadMessages = useCallback(async (id, beforeTimestamp = null) => {\n  //   setIsLoading(true);\n  //   try {\n  //     let url = `http://localhost:8080/api/messages/${beforeTimestamp ? 'load' : 'last'}/${id}`;\n  //     if (beforeTimestamp) {\n  //       url += `?before=${beforeTimestamp}`;\n  //     }\n\n  //     const res = await fetch(url, {\n  //       headers: {\n  //         'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n  //       }\n  //     });\n\n  //     if (res.ok) {\n  //       const data = await res.json();\n  //       if (beforeTimestamp) {\n  //         setMessages(prev => [...data, ...prev]);\n  //         if (data.length === 0) setHasMore(false);\n  //       } else {\n  //         setMessages(data);\n  //       }\n  //       pageRef.current += 1;\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Ошибка загрузки сообщений:\", error);\n  //   } finally {\n  //     setIsLoading(false);\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    const socket = new SockJS('http://localhost:8080/ws');\n    const client = Stomp.over(socket);\n    const init = async () => {\n      const id = await fetchChatId();\n      if (id) {\n        client.connect({}, () => {\n          client.subscribe(`/chat/topic/${id}`, message => {\n            const recMessage = JSON.parse(message.body);\n            setMessages(prevMessages => [...prevMessages, recMessage]);\n          });\n        });\n        setStompClient(client);\n        return () => {\n          client.disconnect();\n        };\n      }\n    };\n    init();\n  }, []);\n  const sendMessage = () => {\n    const clientMessage = {\n      message: inputText,\n      senderId: userId,\n      chatId: chatId\n    };\n    stompClient.send('app/chat', {}, JSON.stringify(clientMessage));\n    console.log(messages);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userInfo_chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userName_chat\",\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 23\n      }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.senderId === userId ? 'my-message' : 'their-message',\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-time\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, `${msg.timestamp}-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"push_chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n        className: \"input_chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chat_button\",\n        onClick: sendMessage,\n        disabled: !inputText.trim(),\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"qc6yWoYQcu9QYFDuiFS+gBOlJQs=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","SockJS","Client","Stomp","jsxDEV","_jsxDEV","Chat","userId","user2Id","username","_s","messages","setMessages","inputText","setInputText","isLoading","setIsLoading","chatId","setChatId","stompClient","setStompClient","containerRef","pageRef","fetchChatId","response","fetch","headers","localStorage","getItem","ok","id","text","createResponse","method","body","JSON","stringify","alert","error","console","socket","client","over","init","connect","subscribe","message","recMessage","parse","prevMessages","disconnect","sendMessage","clientMessage","senderId","send","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","Date","timestamp","toLocaleTimeString","value","onChange","e","target","placeholder","onClick","disabled","trim","_c","$RefreshReg$"],"sources":["C:/Users/noket/Desktop/Sutod/fronted/src/Components/Chats/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport SockJS from 'sockjs-client';\r\nimport { Client, Stomp } from '@stomp/stompjs';\r\nimport './Chat.css';\r\n\r\nfunction Chat({ userId, user2Id, username }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const[chatId, setChatId] = useState(0)\r\n  const[stompClient, setStompClient] = useState(null)\r\n\r\n  const containerRef = useRef(null);\r\n  const pageRef = useRef(0);\r\n\r\n  // Получение или создание чата\r\n  const fetchChatId = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/api/chats/twoId?id1=${userId}&id2=${user2Id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const id = await response.text();\r\n        setChatId(id)\r\n        return id;\r\n      } \r\n      else{\r\n        const createResponse = await fetch('http://localhost:8080/api/chats', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            userId,\r\n            user2Id\r\n          })\r\n        });\r\n\r\n        if (createResponse.ok) {\r\n          return await createResponse.text();\r\n        }\r\n        else{\r\n          alert(\"mdaaa\")\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Chat error:', error);\r\n      return null;\r\n    }\r\n  }, [userId, user2Id]);\r\n\r\n  // Загрузка сообщений\r\n  // const loadMessages = useCallback(async (id, beforeTimestamp = null) => {\r\n  //   setIsLoading(true);\r\n  //   try {\r\n  //     let url = `http://localhost:8080/api/messages/${beforeTimestamp ? 'load' : 'last'}/${id}`;\r\n  //     if (beforeTimestamp) {\r\n  //       url += `?before=${beforeTimestamp}`;\r\n  //     }\r\n\r\n  //     const res = await fetch(url, {\r\n  //       headers: {\r\n  //         'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\r\n  //       }\r\n  //     });\r\n      \r\n  //     if (res.ok) {\r\n  //       const data = await res.json();\r\n  //       if (beforeTimestamp) {\r\n  //         setMessages(prev => [...data, ...prev]);\r\n  //         if (data.length === 0) setHasMore(false);\r\n  //       } else {\r\n  //         setMessages(data);\r\n  //       }\r\n  //       pageRef.current += 1;\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(\"Ошибка загрузки сообщений:\", error);\r\n  //   } finally {\r\n  //     setIsLoading(false);\r\n  //   }\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    const socket = new SockJS('http://localhost:8080/ws')\r\n    const client = Stomp.over(socket)\r\n\r\n    const init = async () => {\r\n      const id = await fetchChatId()\r\n      if (id) {\r\n        client.connect({}, () => {\r\n          client.subscribe(`/chat/topic/${id}`, (message) => {\r\n            const recMessage = JSON.parse(message.body)\r\n            setMessages((prevMessages) => [...prevMessages, recMessage])\r\n          })\r\n        })\r\n\r\n        setStompClient(client)\r\n\r\n        return () => {\r\n          client.disconnect()\r\n        }\r\n      }\r\n    }\r\n    \r\n    init()\r\n  }, [])\r\n\r\n  const sendMessage = () => {\r\n    const clientMessage = {\r\n      message: inputText,\r\n      senderId: userId,\r\n      chatId: chatId,\r\n    }\r\n    stompClient.send('app/chat', {}, JSON.stringify(clientMessage))\r\n    console.log(messages)\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"userInfo_chat\">\r\n        <div className=\"userName_chat\">{username}</div>\r\n        <div className=\"connection-status\">\r\n          \r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages-container\">\r\n        {isLoading && <div className=\"loading-indicator\">Loading...</div>}\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={`${msg.timestamp}-${index}`}\r\n            className={msg.senderId === userId ? 'my-message' : 'their-message'}\r\n          >\r\n            <div className=\"message-content\">{msg.text}</div>\r\n            <div className=\"message-time\">\r\n              {new Date(msg.timestamp).toLocaleTimeString()}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"push_chat\">\r\n        <input value={inputText} onChange={(e) => setInputText(e.target.value)} placeholder=\"Введите сообщение\" className=\"input_chat\"/>\r\n        <button className=\"chat_button\" onClick={sendMessage} disabled={!inputText.trim()}>Отправить</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}