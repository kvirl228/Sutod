import { useEffect, useState } from "react";
import './Chat.css';

function Chat({ userId, user2Id, username }) {
  const [messages, setMessages] = useState([]);
  const [inputText, setInputText] = useState('');
  const [isClick, setIsClick] = useState(true)
  const [deleteId, setDeleteId] = useState(0)
  const [showUserPopup, setShowUserPopup] = useState(false);
  const [userInfo, setUserInfo] = useState(null);
  const [isContact, setIsContact] = useState(false);

  const refreshToken = async () => {
    try {
      const response = await fetch("http://localhost:8080/auth/refresh", {
        method: "POST",
        credentials: "include",
        headers: { "Content-Type": "application/json" }
      });

      if (response.ok) {
        const token = await response.text()
        localStorage.setItem("token", token)
        return true
      }

      return false
    } catch (error) {

      return false
    }
  }
  const subscribe = async () => {

    try {
      const response = await fetch(`http://localhost:8080/api/messages/twoId?id1=${userId}&id2=${user2Id}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem("token")}`,
          'Content-Type': 'application/json'
        },
      });

      if (response.ok) {
        const data = await response.json();
        setMessages([])
        setMessages(prevMessages => [...prevMessages, ...data]);
        setTimeout(() => {
          subscribe()
        }, 1500)

      }
      else if (response.status === 401) {
        if (await refreshToken()) {
          return await subscribe()
        }
      }
      else {
        console.log("dsfads")
      }
    }
    catch (error) {
      setTimeout(() => {
        subscribe()
      }, 1)
    }
  }

  const checkContact = async () => {
    try {
      const response = await fetch(`http://localhost:8080/api/users/contacts/find?id1=${userId}&id2=${user2Id}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem("token")}`,
          'Content-Type': 'application/json'
        },
      });
      if (response.ok) {
        const data = await response.json();
        console.log(data.id)  
        console.log("–µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
        setIsContact(true)
      }
      else {
        console.log("–Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        setIsContact(false)
      }
    }
    catch (error) {
      console.log("error contact", error)
    }
  }

  const sendMessage = async () => {
    try {
      const response = await fetch(`http://localhost:8080/api/messages/send/${user2Id}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem("token")}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: inputText,
          senderId: userId,
        })
      });


      if (response.ok) {
        const message = await response.json()
        const newMessage = [...messages, message]
        setMessages(newMessage)
      }
      else {
        alert("Eror")
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
    }

    setInputText('')
  }

  const deleteMessage = async (id) => {
    try {
      const response = await fetch(`http://localhost:8080/api/messages/${id}`, {
        method: "DELETE",
        headers: {
          'Authorization': `Bearer ${localStorage.getItem("token")}`,
          "Content-Type": "application/json"
        }
      });

      if (response.ok) {
        setIsClick(true)
        subscribe()
      }

      return false
    } catch (error) {

      return false
    }
  }

  const click = (clicker, id) => {
    setIsClick(clicker)
    setDeleteId(id)
  }

  const handleUsernameClick = async () => {
    checkContact();
    setShowUserPopup(true);
    setUserInfo({
      username: username,
      online: true,
      bio: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    });

    // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    /*
    try {
      const response = await fetch(`http://localhost:8080/api/users/${user2Id}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem("token")}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);

      if (response.ok) {
        const userData = await response.json();
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
        setUserInfo(userData);
        setShowUserPopup(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
        const contactsResponse = await fetch(`http://localhost:8080/api/contacts/check/${user2Id}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem("token")}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (contactsResponse.ok) {
          const contactStatus = await contactsResponse.json();
          setIsContact(contactStatus.isContact);
        }
      } else if (response.status === 401) {
        if (await refreshToken()) {
          handleUsernameClick();
        }
      } else {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    }
    */
  }

  const addToContacts = async () => {
    try {
      const response = await fetch('http://localhost:8080/api/users/contacts/add', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem("token")}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: userId,
          contactId: user2Id,
        })
      });


      if (response.ok) {
        alert("yes")
      }
      else {
        alert("Eror")
      }
    } catch (error) {
      alert(error)
    }
  }

  const removeFromContacts = async () => {
    try {
      const response = await fetch('http://localhost:8080/api/users/contacts/delete', {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem("token")}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: userId,
          contactId: user2Id,
        })
      });
      if (response.ok) {
        setIsContact(false)
        alert("yes")
      }
      else {
        alert("Eror")
      }
    } catch (error) {
      alert(error)
    }
  }

  const closeUserPopup = () => {
    setShowUserPopup(false);
    setUserInfo(null);
  }

  useEffect(() => {
    subscribe()
  }, [])


  return (
    <div className="chat-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
      <div className="chat-header">
        <div className="chat-header-info" onClick={handleUsernameClick}>
          <div className="chat-user-avatar">
            {userInfo?.avatar ? (
              <img src={userInfo.avatar} alt="Avatar" />
            ) : (
              <span className="avatar-placeholder">üë§</span>
            )}
            <div className="online-indicator">
              {userInfo?.online ? 'üü¢' : '‚ö™'}
            </div>
          </div>
          <div className="chat-user-info">
            <h3 className="chat-username">{username}</h3>
            <p className="chat-status">
              {userInfo?.online ? '–í —Å–µ—Ç–∏' : '–ù–µ –≤ —Å–µ—Ç–∏'}
            </p>
          </div>
        </div>
        <div className="chat-header-actions">
          <button className="chat-action-btn" title="–ü–æ–∏—Å–∫">
            <span className="action-icon">üîç</span>
          </button>
          <button className="chat-action-btn" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏">
            <span className="action-icon">‚öôÔ∏è</span>
          </button>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div className="messages-container">
        {messages.length === 0 ? (
          <div className="empty-chat">
            <div className="empty-chat-icon">üí¨</div>
            <h3>–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä</h3>
            <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å {username}</p>
          </div>
        ) : (
          <div className="messages-list">
            {messages.map((msg, index) => (
              <div
                key={`${msg.timestamp}-${index}`}
                className={`message-wrapper ${msg.senderId === userId ? 'my_message' : 'their_message'}`}
              >
                <div className="message-bubble" onClick={() => click(!isClick, msg.id)}>
                  <div className="message-content">{msg.message}</div>
                  <div className="message-time">
                    {new Date(msg.timestamp).toLocaleTimeString('ru-RU', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </div>
                  {msg.senderId === userId && (
                    <div className="message-status">
                      {msg.read ? '‚úì‚úì' : '‚úì'}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */}
      {isClick ? (
        <div className="chat-input-panel">
          <div className="input-container">
            <button className="attachment-btn" title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
              <span className="attachment-icon">üìé</span>
            </button>
            <div className="input-wrapper">
              <input
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                className="chat-input"
                onKeyPress={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (inputText.trim()) {
                      sendMessage();
                    }
                  }
                }}
              />
              <button className="emoji-btn" title="–≠–º–æ–¥–∑–∏">
                <span className="emoji-icon">üòä</span>
              </button>
            </div>
            <button
              className="send-btn"
              onClick={sendMessage}
              disabled={!inputText.trim()}
              title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
            >
              <span className="send-icon">üì§</span>
            </button>
          </div>
        </div>
      ) : (
        <div className="delete-panel">

          <button className="delete-btn" onClick={() => deleteMessage(deleteId)}>
            <span className="delete-icon">üóëÔ∏è</span>
            –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </button>
          <button className="cancel-btn" onClick={() => setIsClick(true)}>
            –û—Ç–º–µ–Ω–∞
          </button>

          <div className="input-wrapper">
            <input
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              className="chat-input"
              onKeyPress={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  if (inputText.trim()) {
                    sendMessage();
                  }
                }
              }}
            />
            <button className="emoji-btn" title="–≠–º–æ–¥–∑–∏">
              <span className="emoji-icon">üòä</span>
            </button>
          </div>
          <button
            className="send-btn"
            onClick={sendMessage}
            disabled={!inputText.trim()}
            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
          >
            <span className="send-icon">üì§</span>
          </button>
        </div>
      )}

      {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
      {showUserPopup && (
        <div className="user-popup-overlay" onClick={closeUserPopup}>
          <div className="user-popup" onClick={(e) => e.stopPropagation()}>
            <div className="user-popup-header">
              <div className="user-popup-avatar">
                {userInfo?.avatar ? (
                  <img src={userInfo.avatar} alt="Avatar" />
                ) : (
                  <div className="user-popup-avatar-placeholder">üë§</div>
                )}
              </div>
              <div className="user-popup-info">
                <h3 className="user-popup-name">{userInfo?.username || username}</h3>
                <p className="user-popup-status">
                  {userInfo?.online ? 'üü¢ –í —Å–µ—Ç–∏' : '‚ö™ –ù–µ –≤ —Å–µ—Ç–∏'}
                </p>
              </div>
              <button className="user-popup-close" onClick={closeUserPopup}>‚úï</button>
            </div>

            <div className="user-popup-content">
              {userInfo?.bio && (
                <div className="user-popup-bio">
                  <h4>–û —Å–µ–±–µ:</h4>
                  <p>{userInfo.bio}</p>
                </div>
              )}

              <div className="user-popup-actions">
                {isContact ? (
                  <button className="user-popup-button remove-contact" onClick={removeFromContacts}>
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                  </button>
                ) : (
                  <button className="user-popup-button add-contact" onClick={addToContacts}>
                    üë• –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                  </button>
                )}

                <button className="user-popup-button send-message" onClick={closeUserPopup}>
                  üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Chat;