{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noket\\\\Desktop\\\\Sutod\\\\fronted\\\\src\\\\Components\\\\Chats\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport SockJS from 'sockjs-client';\nimport { Client, Stomp } from '@stomp/stompjs';\nimport axios from \"axios\";\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  userId,\n  user2Id,\n  username\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const refreshToken = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/auth/refresh\", {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const token = await response.text();\n        localStorage.setItem(\"token\", token);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      return false;\n    }\n  };\n  const subscribe = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/messages/twoId?id1=${userId}&id2=${user2Id}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        setMessages(prevMessages => [...prevMessages, ...data]);\n        setTimeout(() => {\n          subscribe();\n        }, 3000);\n      } else if (response.status === 401) {\n        if (await refreshToken()) {\n          return await subscribe();\n        }\n      } else {\n        console.log(\"dsfads\");\n      }\n    } catch (error) {\n      setTimeout(() => {\n        subscribe();\n      }, 1);\n    }\n  };\n  const sendMessage = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/messages/send/${user2Id}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: inputText,\n          senderId: userId\n        })\n      });\n      if (response.ok) {\n        const message = await response.json();\n        const newMessage = [...messages, message];\n        setMessages(newMessage);\n      } else {\n        alert(\"Eror\");\n      }\n    } catch (error) {\n      console.error('Ошибка:', error);\n    }\n  };\n  useEffect(() => {\n    subscribe();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userInfo_chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userName_chat\",\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.senderId === userId ? 'my_message' : 'their_message',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: msg.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)\n      }, `${msg.timestamp}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"push_chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n        className: \"input_chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chat_button\",\n        onClick: sendMessage,\n        disabled: !inputText.trim(),\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"B3eY6J4WkWzPa7yDx3XDfi3BNK0=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","SockJS","Client","Stomp","axios","jsxDEV","_jsxDEV","Chat","userId","user2Id","username","_s","messages","setMessages","inputText","setInputText","refreshToken","response","fetch","method","credentials","headers","ok","token","text","localStorage","setItem","error","subscribe","getItem","data","json","console","log","prevMessages","setTimeout","status","sendMessage","body","JSON","stringify","message","senderId","newMessage","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","timestamp","value","onChange","e","target","placeholder","onClick","disabled","trim","_c","$RefreshReg$"],"sources":["C:/Users/noket/Desktop/Sutod/fronted/src/Components/Chats/Chat.jsx"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport SockJS from 'sockjs-client';\r\nimport { Client, Stomp } from '@stomp/stompjs';\r\nimport axios from \"axios\";\r\nimport './Chat.css';\r\n\r\nfunction Chat({ userId, user2Id, username }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n\r\n  const refreshToken = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/auth/refresh\", {\r\n                  method: \"POST\",\r\n                  credentials: \"include\",\r\n                  headers: { \"Content-Type\": \"application/json\" }\r\n              });\r\n\r\n              if (response.ok) {\r\n                  const token = await response.text()\r\n                  localStorage.setItem(\"token\", token)\r\n                  return true\r\n              }\r\n              \r\n              return false\r\n          } catch (error) {\r\n              \r\n              return false\r\n          }\r\n  }\r\n  \r\n  const subscribe = async () => {\r\n    \r\n    try {\r\n      const response = await fetch(`http://localhost:8080/api/messages/twoId?id1=${userId}&id2=${user2Id}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        });\r\n            \r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setMessages(prevMessages => [...prevMessages, ...data]);\r\n            setTimeout(() => {\r\n              subscribe()\r\n            }, 3000)\r\n            \r\n        } \r\n        else if (response.status === 401) {\r\n            if (await refreshToken()) {\r\n              return await subscribe()\r\n            }\r\n        }\r\n        else{\r\n          console.log(\"dsfads\")\r\n        }\r\n      } \r\n      catch (error) {\r\n        setTimeout(() => {\r\n          subscribe()\r\n        }, 1)\r\n      }\r\n  }\r\n\r\n  const sendMessage = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/api/messages/send/${user2Id}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          message: inputText,\r\n          senderId: userId,\r\n        })\r\n      });\r\n\r\n      \r\n      if(response.ok){\r\n            const message = await response.json()\r\n            const newMessage = [...messages, message]\r\n            setMessages(newMessage)\r\n        }\r\n        else{\r\n            alert(\"Eror\")\r\n        }\r\n    } catch (error) {\r\n      console.error('Ошибка:', error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    subscribe()\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"userInfo_chat\">\r\n        <div className=\"userName_chat\">{username}</div>\r\n        <div className=\"connection-status\">\r\n          \r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"messages-container\">\r\n        {messages.map((msg, index) => (\r\n          <div key={`${msg.timestamp}-${index}`} className={msg.senderId === userId ? 'my_message' : 'their_message'}>\r\n            <div className=\"message-content\">{msg.message}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"push_chat\">\r\n        <input value={inputText} onChange={(e) => setInputText(e.target.value)} placeholder=\"Введите сообщение\" className=\"input_chat\"/>\r\n        <button className=\"chat_button\" onClick={sendMessage} disabled={!inputText.trim()}>Отправить</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}