{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\markp\\\\Desktop\\\\Sutod\\\\Frontend\\\\src\\\\Components\\\\Chats\\\\Menu.jsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from 'react';\nimport './Chat.css';\nimport ChatInfo from './Chat_info';\nimport { useNavigate } from 'react-router-dom';\nimport Chat from './Chat';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chats() {\n  _s();\n  const navigate = useNavigate();\n  const [searchCheck, setSearchCheck] = useState(true);\n  const [isClick, setIsClick] = useState(true);\n  const [userid, setuserId] = useState(-1);\n  const [user2Id, setUser2Id] = useState(-1);\n  const [username, setUsername] = useState('');\n  const [search, setSearch] = useState('');\n  const [userInfo, setUserInfo] = useState([]);\n  const [userChats, setUserChats] = useState([]);\n  const [userGroups, setUserGroups] = useState([]);\n  const [userChannels, setUserChannels] = useState([]);\n  const [activeCategory, setActiveCategory] = useState('chats'); // 'chats', 'groups', 'channels'\n  const [selectedChatId, setSelectedChatId] = useState(null); // ID выбранного чата/группы/канала\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n    if (e.target.value.trim() === '') {\n      setSearchCheck(true);\n      setSelectedChatId(null); // Сбрасываем выбранный чат при очистке поиска\n    }\n  };\n  const toSettings = () => navigate(\"/settings\");\n  const toGroupCreate = () => navigate(\"/group\");\n  const clickChat = (value, id, name) => {\n    if (selectedChatId === id) {\n      console.log('Deselecting chat:', id);\n      setSelectedChatId(null);\n      setUser2Id(id);\n      setUsername(null);\n      setIsClick(true);\n    } else {\n      console.log('Selecting new chat:', id);\n      setIsClick(!value);\n      setUser2Id(id);\n      setUsername(name);\n      setSelectedChatId(id);\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/auth/refresh\", {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const token = await response.text();\n        localStorage.setItem(\"token\", token);\n        return true;\n      }\n      navigate('/');\n      return false;\n    } catch (error) {\n      navigate('/');\n      return false;\n    }\n  };\n  const searchUser = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/users/${search}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUserInfo([data]);\n        setSearchCheck(false);\n      } else if (response.status === 401) {\n        if (await refreshToken()) {\n          await searchUser();\n        }\n      } else {\n        setSearchCheck(true);\n      }\n    } catch (error) {\n      setSearchCheck(true);\n      console.error('Ошибка:', error);\n    }\n  };\n  const getUserId = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/users/id/${localStorage.getItem(\"token\")}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setuserId(data);\n        return data;\n      } else if (response.status === 401) {\n        if (await refreshToken()) {\n          return await getUserId();\n        }\n      }\n      return null;\n    } catch (error) {\n      console.error('Ошибка:', error);\n      return null;\n    }\n  };\n  const switchCategory = category => {\n    setActiveCategory(category);\n    setSearchCheck(true);\n    setSelectedChatId(null);\n  };\n  const getAllChats = async id => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/chats/${id}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUserChats(Array.isArray(data) ? data : [data]);\n        console.log('Chats:', data);\n        setActiveCategory('chats'); // Устанавливаем активную категорию\n      } else if (response.status === 401) {\n        if (await refreshToken()) {\n          await getAllChats(id);\n        }\n      }\n    } catch (error) {\n      console.error('Ошибка при загрузке чатов:', error);\n    }\n  };\n  const getAllGroups = async id => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/groups/${id}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUserGroups(Array.isArray(data) ? data : [data]);\n        console.log('Groups:', data);\n        setActiveCategory('groups'); // Устанавливаем активную категорию\n      } else if (response.status === 401) {\n        if (await refreshToken()) {\n          await getAllGroups(id);\n        }\n      }\n    } catch (error) {\n      console.error('Ошибка при загрузке групп:', error);\n    }\n  };\n  const getAllChannels = async id => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/channels/${id}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUserChannels(Array.isArray(data) ? data : [data]);\n        console.log('Channels:', data);\n        setActiveCategory('channels'); // Устанавливаем активную категорию\n      } else if (response.status === 401) {\n        if (await refreshToken()) {\n          await getAllChannels(id);\n        }\n      }\n    } catch (error) {\n      console.error('Ошибка при загрузке каналов:', error);\n    }\n  };\n  useEffect(() => {\n    const init = async () => {\n      const id = await getUserId();\n      if (id) {\n        await getAllChats(id);\n      }\n    };\n    init();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chats_block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder_block\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user_block\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user_folder_photo\",\n          onClick: toSettings\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"user_folder_search\",\n          placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A\",\n          value: search,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"search_button\",\n          onClick: searchUser,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"search_icon\",\n            children: \"\\uD83D\\uDD0D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder\",\n        children: !searchCheck ?\n        // Поиск пользователей\n        userInfo.map((user, index) => /*#__PURE__*/_jsxDEV(ChatInfo, {\n          name: user.name,\n          text: \"\",\n          time: \"\",\n          func: () => clickChat(isClick, user.id, user.name),\n          isSelected: selectedChatId === user.id,\n          chatId: user.id\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }, this)) :\n        /*#__PURE__*/\n        // Отображаем данные в зависимости от активной категории\n        _jsxDEV(_Fragment, {\n          children: [activeCategory === 'chats' && userChats.map((item, index) => {\n            var _item$lastMessage, _item$lastMessage2;\n            return /*#__PURE__*/_jsxDEV(ChatInfo, {\n              name: item.name,\n              text: ((_item$lastMessage = item.lastMessage) === null || _item$lastMessage === void 0 ? void 0 : _item$lastMessage.text) || \"\",\n              time: ((_item$lastMessage2 = item.lastMessage) === null || _item$lastMessage2 === void 0 ? void 0 : _item$lastMessage2.timestamp) || \"\",\n              func: () => clickChat(isClick, item.user2Id, item.name),\n              isSelected: selectedChatId === item.user2Id,\n              chatId: item.user2Id\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 33\n            }, this);\n          }), activeCategory === 'groups' && userGroups.map((item, index) => /*#__PURE__*/_jsxDEV(ChatInfo, {\n            name: item.name || item.groupName || \"Группа\",\n            text: item.description || \"\",\n            time: \"\",\n            func: () => clickChat(isClick, item.id, item.name || item.groupName),\n            isSelected: selectedChatId === item.id,\n            chatId: item.id\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 33\n          }, this)), activeCategory === 'channels' && userChannels.map((item, index) => /*#__PURE__*/_jsxDEV(ChatInfo, {\n            name: item.name || item.channelName || \"Канал\",\n            text: item.description || \"\",\n            time: \"\",\n            func: () => clickChat(isClick, item.id, item.name || item.channelName),\n            isSelected: selectedChatId === item.id,\n            chatId: item.id\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), !selectedChatId && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create_buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create_button group_create\",\n          onClick: toGroupCreate,\n          title: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0433\\u0440\\u0443\\u043F\\u043F\\u0443\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"create_icon\",\n            children: \"\\uD83D\\uDC65\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"create_text\",\n            children: \"\\u0413\\u0440\\u0443\\u043F\\u043F\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create_button channel_create\",\n          onClick: () => navigate(\"/channel\"),\n          title: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043A\\u0430\\u043D\\u0430\\u043B\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"create_text\",\n            children: \"\\uD83D\\uDCE2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"create_text\",\n            children: \"\\u041A\\u0430\\u043D\\u0430\\u043B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_block\",\n      children: !isClick && /*#__PURE__*/_jsxDEV(Chat, {\n        userId: userid,\n        user2Id: user2Id,\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data_buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `data_button ${activeCategory === 'chats' ? 'active' : ''}`,\n        onClick: () => {\n          switchCategory('chats');\n          getAllChats(userid);\n        },\n        children: [\"\\u0427\\u0430\\u0442\\u044B (\", userChats.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `data_button ${activeCategory === 'groups' ? 'active' : ''}`,\n        onClick: () => {\n          switchCategory('groups');\n          getAllGroups(userid);\n        },\n        children: [\"\\u0413\\u0440\\u0443\\u043F\\u043F\\u044B (\", userGroups.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `data_button ${activeCategory === 'channels' ? 'active' : ''}`,\n        onClick: () => {\n          switchCategory('channels');\n          getAllChannels(userid);\n        },\n        children: [\"\\u041A\\u0430\\u043D\\u0430\\u043B\\u044B (\", userChannels.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n}\n_s(Chats, \"AsSuvnroqb/T5yr4/k1svRxzyEk=\", false, function () {\n  return [useNavigate];\n});\n_c = Chats;\nexport default Chats;\nvar _c;\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"names":["useCallback","useEffect","useState","ChatInfo","useNavigate","Chat","jsxDEV","_jsxDEV","Fragment","_Fragment","Chats","_s","navigate","searchCheck","setSearchCheck","isClick","setIsClick","userid","setuserId","user2Id","setUser2Id","username","setUsername","search","setSearch","userInfo","setUserInfo","userChats","setUserChats","userGroups","setUserGroups","userChannels","setUserChannels","activeCategory","setActiveCategory","selectedChatId","setSelectedChatId","handleChange","e","target","value","trim","toSettings","toGroupCreate","clickChat","id","name","console","log","refreshToken","response","fetch","method","credentials","headers","ok","token","text","localStorage","setItem","error","searchUser","getItem","data","json","status","getUserId","switchCategory","category","getAllChats","Array","isArray","getAllGroups","getAllChannels","init","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","map","user","index","time","func","isSelected","chatId","item","_item$lastMessage","_item$lastMessage2","lastMessage","timestamp","groupName","description","channelName","title","userId","length","_c","$RefreshReg$"],"sources":["C:/Users/markp/Desktop/Sutod/Frontend/src/Components/Chats/Menu.jsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\r\nimport './Chat.css'\r\nimport ChatInfo from './Chat_info';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Chat from './Chat';\r\n\r\nfunction Chats() {\r\n    const navigate = useNavigate()\r\n    const [searchCheck, setSearchCheck] = useState(true)\r\n    const [isClick, setIsClick] = useState(true)\r\n    const [userid, setuserId] = useState(-1)\r\n    const [user2Id, setUser2Id] = useState(-1)\r\n    const [username, setUsername] = useState('')\r\n    const [search, setSearch] = useState('')\r\n    const [userInfo, setUserInfo] = useState([])\r\n    const [userChats, setUserChats] = useState([])\r\n    const [userGroups, setUserGroups] = useState([])\r\n    const [userChannels, setUserChannels] = useState([])\r\n    const [activeCategory, setActiveCategory] = useState('chats') // 'chats', 'groups', 'channels'\r\n    const [selectedChatId, setSelectedChatId] = useState(null) // ID выбранного чата/группы/канала\r\n\r\n    const handleChange = (e) => {\r\n        setSearch(e.target.value)\r\n        if (e.target.value.trim() === '') {\r\n            setSearchCheck(true)\r\n            setSelectedChatId(null) // Сбрасываем выбранный чат при очистке поиска\r\n        }\r\n    }\r\n\r\n    const toSettings = () => navigate(\"/settings\")\r\n    const toGroupCreate = () => navigate(\"/group\")\r\n\r\n    const clickChat = (value, id, name) => {\r\n        if (selectedChatId === id) {\r\n            console.log('Deselecting chat:', id)\r\n            setSelectedChatId(null)\r\n            setUser2Id(id)\r\n            setUsername(null)\r\n            setIsClick(true)\r\n        } else {\r\n            console.log('Selecting new chat:', id)\r\n            setIsClick(!value)\r\n            setUser2Id(id)\r\n            setUsername(name)\r\n            setSelectedChatId(id)\r\n        }\r\n    }\r\n\r\n    const refreshToken = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:8080/auth/refresh\", {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            });\r\n\r\n            if (response.ok) {\r\n                const token = await response.text()\r\n                localStorage.setItem(\"token\", token)\r\n                return true\r\n            }\r\n            navigate('/')\r\n            return false\r\n        } catch (error) {\r\n            navigate('/')\r\n            return false\r\n        }\r\n    }\r\n\r\n    const searchUser = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/users/${search}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setUserInfo([data])\r\n                setSearchCheck(false)\r\n            } else if (response.status === 401) {\r\n                if (await refreshToken()) {\r\n                    await searchUser()\r\n                }\r\n            } else {\r\n                setSearchCheck(true)\r\n            }\r\n        } catch (error) {\r\n            setSearchCheck(true)\r\n            console.error('Ошибка:', error);\r\n        }\r\n    }\r\n\r\n    const getUserId = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/users/id/${localStorage.getItem(\"token\")}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            });\r\n            \r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setuserId(data)\r\n                return data\r\n            } else if (response.status === 401) {\r\n                if (await refreshToken()) {\r\n                    return await getUserId()\r\n                }\r\n            }\r\n            return null\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n            return null\r\n        }\r\n    }\r\n\r\n    const switchCategory = (category) => {\r\n        setActiveCategory(category)\r\n        setSearchCheck(true) \r\n        setSelectedChatId(null) \r\n    }\r\n\r\n    const getAllChats = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/chats/${id}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            })\r\n\r\n            if (response.ok) {\r\n                const data = await response.json()\r\n                setUserChats(Array.isArray(data) ? data : [data])\r\n                console.log('Chats:', data)\r\n                setActiveCategory('chats') // Устанавливаем активную категорию\r\n            } \r\n            else if (response.status === 401) {\r\n                if (await refreshToken()) {\r\n                    await getAllChats(id)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при загрузке чатов:', error);\r\n        }\r\n    }\r\n\r\n    const getAllGroups = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/groups/${id}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            })\r\n\r\n            if (response.ok) {\r\n                const data = await response.json()\r\n                setUserGroups(Array.isArray(data) ? data : [data])\r\n                console.log('Groups:', data)\r\n                setActiveCategory('groups') // Устанавливаем активную категорию\r\n            } \r\n            else if (response.status === 401) {\r\n                if (await refreshToken()) {\r\n                    await getAllGroups(id)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при загрузке групп:', error);\r\n        }\r\n    }\r\n\r\n    const getAllChannels = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/api/channels/${id}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem(\"token\")}`,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n            })\r\n\r\n            if (response.ok) {\r\n                const data = await response.json()\r\n                setUserChannels(Array.isArray(data) ? data : [data])\r\n                console.log('Channels:', data)\r\n                setActiveCategory('channels') // Устанавливаем активную категорию\r\n            } \r\n            else if (response.status === 401) {\r\n                if (await refreshToken()) {\r\n                    await getAllChannels(id)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при загрузке каналов:', error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            const id = await getUserId()\r\n            if (id) {\r\n                await getAllChats(id)\r\n            }\r\n        }\r\n        init()\r\n    }, [])\r\n\r\n    return (\r\n        <div className='chats_block'>\r\n            <div className=\"folder_block\">\r\n                <div className=\"user_block\">\r\n                    <div className=\"user_folder_photo\" onClick={toSettings}></div>\r\n                    <input className=\"user_folder_search\" placeholder='Поиск' value={search} onChange={handleChange}/>\r\n                    <button className=\"search_button\" onClick={searchUser}>\r\n                        <span className=\"search_icon\">🔍</span>\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"folder\">\r\n                    {!searchCheck ? (\r\n                        // Поиск пользователей\r\n                        userInfo.map((user, index) => (\r\n                            <ChatInfo\r\n                                key={index}\r\n                                name={user.name}\r\n                                text=\"\"\r\n                                time=\"\"\r\n                                func={() => clickChat(isClick, user.id, user.name)}\r\n                                isSelected={selectedChatId === user.id}\r\n                                chatId={user.id}\r\n                            />\r\n                        ))\r\n                    ) : (\r\n                        // Отображаем данные в зависимости от активной категории\r\n                        <>\r\n                            {activeCategory === 'chats' && userChats.map((item, index) => (\r\n                                <ChatInfo\r\n                                    key={index}\r\n                                    name={item.name}\r\n                                    text={item.lastMessage?.text || \"\"}\r\n                                    time={item.lastMessage?.timestamp || \"\"}\r\n                                    func={() => clickChat(isClick, item.user2Id, item.name)}\r\n                                    isSelected={selectedChatId === item.user2Id}\r\n                                    chatId={item.user2Id}\r\n                                />\r\n                            ))}\r\n                            {activeCategory === 'groups' && userGroups.map((item, index) => (\r\n                                <ChatInfo\r\n                                    key={index}\r\n                                    name={item.name || item.groupName || \"Группа\"}\r\n                                    text={item.description || \"\"}\r\n                                    time=\"\"\r\n                                    func={() => clickChat(isClick, item.id, item.name || item.groupName)}\r\n                                    isSelected={selectedChatId === item.id}\r\n                                    chatId={item.id}\r\n                                />\r\n                            ))}\r\n                            {activeCategory === 'channels' && userChannels.map((item, index) => (\r\n                                <ChatInfo\r\n                                    key={index}\r\n                                    name={item.name || item.channelName || \"Канал\"}\r\n                                    text={item.description || \"\"}\r\n                                    time=\"\"\r\n                                    func={() => clickChat(isClick, item.id, item.name || item.channelName)}\r\n                                    isSelected={selectedChatId === item.id}\r\n                                    chatId={item.id}\r\n                                />\r\n                            ))}\r\n                        </>\r\n                    )}\r\n                </div>\r\n                {!selectedChatId && (\r\n                    <div className=\"create_buttons\">\r\n                        <button \r\n                            className=\"create_button group_create\"\r\n                            onClick={toGroupCreate}\r\n                            title=\"Создать группу\"\r\n                        >\r\n                            <span className=\"create_icon\">👥</span>\r\n                            <span className=\"create_text\">Группа</span>\r\n                        </button>\r\n                        <button \r\n                            className=\"create_button channel_create\"\r\n                            onClick={() => navigate(\"/channel\")}\r\n                            title=\"Создать канал\"\r\n                        >\r\n                            <span className=\"create_text\">📢</span>\r\n                            <span className=\"create_text\">Канал</span>\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className='chat_block'>\r\n                {!isClick && (\r\n                    <Chat\r\n                        userId={userid}\r\n                        user2Id={user2Id}\r\n                        username={username}\r\n                    />\r\n                )}\r\n            </div>\r\n            \r\n            <div className=\"data_buttons\">\r\n                <button \r\n                    className={`data_button ${activeCategory === 'chats' ? 'active' : ''}`}\r\n                    onClick={() => {\r\n                        switchCategory('chats')\r\n                        getAllChats(userid)\r\n                    }}\r\n                >\r\n                    Чаты ({userChats.length})\r\n                </button>\r\n                <button \r\n                    className={`data_button ${activeCategory === 'groups' ? 'active' : ''}`}\r\n                    onClick={() => {\r\n                        switchCategory('groups')\r\n                        getAllGroups(userid)\r\n                    }}\r\n                >\r\n                    Группы ({userGroups.length})\r\n                </button>\r\n                <button \r\n                    className={`data_button ${activeCategory === 'channels' ? 'active' : ''}`}\r\n                    onClick={() => {\r\n                        switchCategory('channels')\r\n                        getAllChannels(userid)\r\n                    }}\r\n                >\r\n                    Каналы ({userChannels.length})\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}